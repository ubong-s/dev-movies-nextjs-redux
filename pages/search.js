import Head from 'next/head'
import { useEffect } from 'react'
import { useDispatch, useSelector } from 'react-redux'
import styled from 'styled-components'
import { SearchForm, SearchResults, Container } from '../components'

import {
  fetchSearchQueryError,
  fetchSearchQueryStart,
  fetchSearchQuerySuccess,
  selectSearchQuery,
  selectSearchResults,
  updateSearchQuery,
} from '../features/search/searchSlice'
import { breakpoints, dimensions, variables } from '../styles/globalStyle'

const SearchPage = () => {
  const dispatch = useDispatch()
  const searchQuery = useSelector(selectSearchQuery)
  const searchQueryResults = useSelector(selectSearchResults)

  const fetchResults = async (query) => {
    dispatch(fetchSearchQueryStart())

    try {
      const response = await fetch(
        `
        https://api.themoviedb.org/3/search/multi?api_key=${process.env.NEXT_PUBLIC_TMDB_KEY}&language=en-US&query=${query}&page=1&include_adult=false
        `
      )
      const results = await response.json()
      dispatch(fetchSearchQuerySuccess(results))
    } catch (error) {
      const errorMsg = `Error fetching`
      dispatch(fetchSearchQueryError(errorMsg))
    }
  }

  useEffect(() => {
    fetchResults(searchQuery)
    // eslint-disable-next-line
  }, [searchQuery])

  return (
    <div>
      <Head>
        <title>Search | Dev Movies</title>
        <meta name='description' content='Generated by create next app' />
        <link rel='icon' href='/favicon.ico' />
      </Head>
      <Empty>{/* clears the header on larger screens */}</Empty>
      <SearchContainer>
        <SearchFormWrap>
          <h1>
            {searchQuery
              ? `Search for "${searchQuery}"`
              : 'Search for movies/shows'}
          </h1>
          <form
            onSubmit={(e) => {
              e.preventDefault()
            }}
          >
            <input
              type='text'
              aria-label='search'
              name='search'
              placeholder='Start typing.....'
              value={searchQuery}
              onChange={(e) => dispatch(updateSearchQuery(e.target.value))}
            />
          </form>
        </SearchFormWrap>
        {searchQueryResults?.results && (
          <SearchResults data={searchQueryResults.results} />
        )}
      </SearchContainer>
    </div>
  )
}

export default SearchPage

const Empty = styled.div`
  @media screen and (min-width: ${breakpoints.desktop}px) {
    height: ${dimensions.headerHeight.desktop};
  }
`

const SearchContainer = styled.div`
  width: 90%;
  margin: auto;

  @media screen and (min-width: ${breakpoints.desktop}px) {
    width: 60%;
  }
`
const SearchFormWrap = styled.section`
  form {
    display: flex;
    flex-direction: column;
    gap: 0.5rem;

    input {
      width: 100%;
      padding: 1rem;
      outline: none;
      border: 1px solid ${(props) => props.theme.neutral};
      border-radius: ${variables.roundings.medium};
      font-family: ${variables.fonts.secondary};
      transition: ${variables.misc.transitionEase};
      background: white;

      &:focus,
      &:hover {
      }
    }
  }

  @media screen and (min-width: ${breakpoints.desktop}px) {
    form {
      input {
        font-size: 1.15rem;
      }
    }
  }
`
